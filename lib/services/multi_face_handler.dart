import 'package:google_mlkit_face_detection/google_mlkit_face_detection.dart';
import 'package:flutter/material.dart';
import 'package:image/image.dart' as img; // GÃ¶rÃ¼ntÃ¼ iÅŸleme iÃ§in eklendi
import 'dart:io'; // Dosya iÅŸlemleri iÃ§in eklendi

import '../models/face_model.dart';
import 'dart:math';
import '../core/error_handler.dart';
import 'face_match_service.dart';
import 'face_embedding_service.dart'; // Embedding servisi eklendi

/// Multi-face detection sonucu
class MultiFaceResult {
  // ... (SÄ±nÄ±f tanÄ±mÄ± aynÄ±)
}

/// YÃ¼z eÅŸleÅŸme sonucu
class FaceMatch {
  // ... (SÄ±nÄ±f tanÄ±mÄ± aynÄ±)
}

/// Multi-face handling servisi
class MultiFaceHandler {
  static final MultiFaceHandler _instance = MultiFaceHandler._internal();
  factory MultiFaceHandler() => _instance;
  MultiFaceHandler._internal();

  /// Birden fazla yÃ¼zÃ¼ iÅŸler, kalitelerini kontrol eder ve kayÄ±tlÄ± yÃ¼zlerle eÅŸleÅŸtirir.
  Future<MultiFaceResult> processMultipleFaces(
    List<Face> faces,
    File imageFile, // Orijinal resim dosyasÄ± eklendi
    FaceEmbeddingService embeddingService, // Servis eklendi
    List<FaceModel> registeredFaces,
  ) async {
    if (faces.isEmpty) {
      return MultiFaceResult(
        allFaces: [],
        message: 'ğŸš« No faces detected',
        metrics: {},
        qualityFaces: [],
        matches: [],
      );
    }
    
    final qualityFaces = _filterQualityFaces(faces);
    final primaryFace = _selectPrimaryFace(qualityFaces);
    
    // DÃœZELTÄ°LDÄ°: Orijinal gÃ¶rÃ¼ntÃ¼ ve servis ile eÅŸleÅŸtirme yapÄ±lÄ±yor
    final matches = await _matchAllFaces(qualityFaces, imageFile, embeddingService, registeredFaces);
    
    final metrics = _calculateMetrics(faces, qualityFaces, matches);
    final message = _generateMessage(faces, qualityFaces, matches);

    return MultiFaceResult(
      allFaces: faces,
      primaryFace: primaryFace,
      qualityFaces: qualityFaces,
      message: message,
      metrics: metrics,
      matches: matches,
    );
  }

  List<Face> _filterQualityFaces(List<Face> faces) {
    // ... (Bu metodun iÃ§eriÄŸi aynÄ± kalabilir)
  }

  Face? _selectPrimaryFace(List<Face> faces) {
    // ... (Bu metodun iÃ§eriÄŸi aynÄ± kalabilir)
  }

  /// TÃ¼m kaliteli yÃ¼zleri, orijinal gÃ¶rÃ¼ntÃ¼den kÄ±rpÄ±p embedding'lerini Ã§Ä±kararak eÅŸleÅŸtirir.
  Future<List<FaceMatch>> _matchAllFaces(
    List<Face> faces,
    File imageFile,
    FaceEmbeddingService embeddingService,
    List<FaceModel> registeredFaces,
  ) async {
    final matches = <FaceMatch>[];
    if (registeredFaces.isEmpty) return matches;

    // Orijinal gÃ¶rÃ¼ntÃ¼yÃ¼ bir kez yÃ¼kle
    final imageBytes = await imageFile.readAsBytes();
    final fullImage = img.decodeImage(imageBytes);
    if (fullImage == null) return matches;
    
    for (final face in faces) {
      try {
        final match = await _matchSingleFace(face, fullImage, embeddingService, registeredFaces);
        matches.add(match);
      } catch (e) {
        ErrorHandler.error(
          'Face matching error for one face',
          category: ErrorCategory.faceRecognition,
          tag: 'SINGLE_FACE_MATCH_ERROR',
          error: e,
        );
        matches.add(FaceMatch(
          detectedFace: face,
          similarity: 0.0,
          confidence: 'Error',
        ));
      }
    }
    
    return matches;
  }

  /// Tek bir yÃ¼zÃ¼ kÄ±rpar, embedding'ini Ã§Ä±karÄ±r ve en iyi eÅŸleÅŸmeyi bulur.
  Future<FaceMatch> _matchSingleFace(
    Face face,
    img.Image fullImage,
    FaceEmbeddingService embeddingService,
    List<FaceModel> registeredFaces,
  ) async {
    // 1. YÃ¼zÃ¼ gÃ¶rÃ¼ntÃ¼den kÄ±rp
    final x = face.boundingBox.left.toInt();
    final y = face.boundingBox.top.toInt();
    final w = face.boundingBox.width.toInt();
    final h = face.boundingBox.height.toInt();
    final croppedFaceImage = img.copyCrop(fullImage, x: x, y: y, width: w, height: h);

    // 2. KÄ±rpÄ±lan yÃ¼zÃ¼ geÃ§ici bir dosyaya yaz
    final tempDir = await Directory.systemTemp.createTemp();
    final tempFile = File('${tempDir.path}/temp_face.jpg');
    await tempFile.writeAsBytes(img.encodeJpg(croppedFaceImage));

    // 3. Embedding'i Ã§Ä±kar
    // HATA BURADAYDI: face.embedding yerine, kÄ±rpÄ±lan resimden embedding Ã§Ä±karÄ±lÄ±yor.
    final detectedEmbedding = await embeddingService.extractEmbedding(tempFile);
    
    // 4. GeÃ§ici dosyayÄ± sil
    await tempFile.delete();
    await tempDir.delete();

    // 5. En iyi eÅŸleÅŸmeyi bul
    double bestSimilarity = 0.0;
    FaceModel? bestMatch;
    
    for (final registeredFace in registeredFaces) {
      if (registeredFace.embedding != null && registeredFace.embedding!.isNotEmpty) {
        final similarity = FaceMatchService.cosineSimilarity(
          detectedEmbedding,
          registeredFace.embedding!,
        );
        
        if (similarity > bestSimilarity) {
          bestSimilarity = similarity;
          bestMatch = registeredFace;
        }
      }
    }
    
    String confidence;
    if (bestSimilarity > 0.7) confidence = 'High';
    else if (bestSimilarity > 0.4) confidence = 'Medium';
    else confidence = 'Low';

    return FaceMatch(
      detectedFace: face,
      matchedModel: bestSimilarity > 0.7 ? bestMatch : null,
      similarity: bestSimilarity,
      confidence: confidence,
    );
  }

  Map<String, dynamic> _calculateMetrics(List<Face> allFaces, List<Face> qualityFaces, List<FaceMatch> matches) {
    // ... (Bu metodun iÃ§eriÄŸi aynÄ± kalabilir)
  }

  String _generateMessage(List<Face> allFaces, List<Face> qualityFaces, List<FaceMatch> matches) {
    // ... (Bu metodun iÃ§eriÄŸi aynÄ± kalabilir)
  }
}

// MultiFacePainter sÄ±nÄ±fÄ± aynÄ± kalabilir...
